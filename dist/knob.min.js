(()=>{"use strict";function e(e,n,t,r){n.forEach((n=>{!function(e,n,t,r){e.addEventListener(n,t,r)}(e,n,t,r)}))}function n(e,n,t,r){n.forEach((n=>{e.removeEventListener(n,t,r)}))}function t(e,n,t){return e.dispatchEvent(new CustomEvent(n,t))}const r=function(e,n){return customElements.get(n)?Promise.reject(new Error(`Already defined <${n}>`)):(customElements.define(n,e),customElements.whenDefined(n))};var s;!function(e){e.spinStart="spinstart",e.spinning="spinning",e.spinEnd="spinend",e.change="change"}(s||(s={}));const o=s,i=function(e){if(e instanceof MouseEvent)return{x:e.clientX,y:e.clientY};if(e instanceof TouchEvent){const{touches:[n]}=e;return{x:n.clientX,y:n.clientY}}throw new ReferenceError(`Illegal event: ${e}`)},{PI:a,hypot:c,asin:d}=Math,l={x:0,y:0};function h(e,n=l){return e.y<n.y?e.x>n.x?1:2:e.x<n.x?3:e.y>n.y?4:1}function u(e,n=l,t=h(e,n)){const r=e.x-n.x,s=e.y-n.y,o=c(r,s);switch(t){default:case 1:return d(-s/o);case 2:return d(-r/o);case 3:return d(s/o);case 4:return d(r/o)}}const g=["mousedown","touchstart"],m=["mousemove","touchmove"],b=["mouseup","touchend"];function p(r){const{degree:s}=this;if(!t(this,o.spinStart,{bubbles:!0,cancelable:!0,composed:!0,detail:{degree:s,lastDegree:s,offsetDegree:0}}))return;const{top:c,right:d,bottom:l,left:g}=this.getBoundingClientRect(),p={x:(d+g)/2,y:(c+l)/2},f=i(r),x=h(f,p),y=u(f,p,x);let v=0,w=x,k=y;const E=e=>{const n=i(e),r=h(n,p),c=u(n,p,r),d=function(e,n,t,r){switch(t-e){default:case 0:return n-r;case-3:case 1:return n-r-a/2;case-1:case 3:return n-r+a/2;case-2:case 2:{const e=n+a-r;return e>a?2*a-e:e}}}(w,k,r,c)/a*180,{degree:l}=this;v+=d;const g=s+v,m=t(this,o.spinning,{bubbles:!0,cancelable:!0,composed:!0,detail:{degree:g,lastDegree:l,offsetDegree:v}});w=r,k=c,m&&(this.degree=g)},D=()=>{const{degree:e}=this;n(document,m,E),n(document,b,D),t(this,o.spinEnd,{bubbles:!0,cancelable:!1,composed:!0,detail:{degree:e,lastDegree:s,offsetDegree:v}})};r.preventDefault(),e(document,m,E),e(document,b,D)}var f;!function(e){e.disabled="disabled",e.degree="degree",e.min="min",e.max="max"}(f||(f={}));const x=f,{isNaN:y}=globalThis,v=document.createElement("template");v.innerHTML='\n  <style>\n    :host {\n      position: relative;\n      display: inline-block;\n      vertical-align: text-bottom;\n    }\n\n    knob {\n      transform: rotate(var(--degree));\n      width: 100%;\n      height: 100%;\n      display: block;\n    }\n  </style>\n  <knob>\n    <slot></slot>\n    <cover>\n      <slot name="pointer"></slot>\n    </cover>\n  </knob>\n';class w extends HTMLElement{#disabled=!1;#minDegree=-1/0;#maxDegree=1/0;#degree=0;constructor(){super(),this.attachShadow({mode:"open"});const e=this.shadowRoot;e.append(v.content.cloneNode(!0)),this.domKnob=e.querySelector("knob"),w.observedAttributes.forEach((e=>{this.attributeChangedCallback(e)}))}static get observedAttributes(){return[x.disabled,x.min,x.max,x.degree]}attributeChangedCallback(e){switch(e){default:break;case x.disabled:this.disabled=this.hasAttribute(x.disabled);break;case x.min:this.min=Number(this.getAttribute(x.min)??-1/0),this.degree=Math.max(this.min,this.degree);break;case x.max:this.max=Number(this.getAttribute(x.max)??1/0),this.degree=Math.min(this.max,this.degree);break;case x.degree:this.degree=Number(this.getAttribute(x.degree)??0)}}get disabled(){return this.#disabled}set disabled(t){const r=Boolean(t);r?n(this,g,p):e(this,g,p),this.#disabled=r}get min(){return this.#minDegree}set min(e){if(y(e))throw new TypeError(`Invalid min degree: ${e}`);if(this.#minDegree=e,this.max<e)throw new RangeError(`Setting min degree that is greater than max degree might cause spinning error: ${e} > ${this.max}`)}get max(){return this.#maxDegree}set max(e){if(y(e))throw new TypeError(`Invalid max degree: ${e}`);if(this.#maxDegree=e,this.min>e)throw new RangeError(`Setting max degree that is less than min degree might cause spinning error: ${e} < ${this.min}`)}get degree(){return this.#degree}set degree(e){const{degree:n}=this;if(e===n)return;if(y(e))throw new TypeError(`Invalid degree: ${e}`);const r=Math.max(Math.min(e,this.max),this.min);this.domKnob.style.setProperty("--degree",`${r}deg`),this.#degree=r,t(this,o.change,{bubbles:!1,cancelable:!1,detail:{degree:r,lastDegree:n,offsetDegree:r-n}})}get value(){return this.degree}set value(e){this.degree=e}}r(w,"knob-base");const k=w,E=document.createElement("template");E.innerHTML="\n  <style>\n    :host {\n      --size: 80px;\n      \n      width: var(--size);\n      height: var(--size);\n    }\n\n    knob {\n      position: relative;\n      border-radius: 50%;\n      box-sizing: border-box;\n      border: 1px solid currentColor;\n      background: #f3f3f3;\n      color: #aaa;\n      overflow: hidden;\n    }\n\n    knob:hover,\n    knob:active {\n      color: #888;\n      background: #eee;\n    }\n\n    cover {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      display: flex;\n      z-index: 1;\n    }\n\n    slot[name=pointer] {\n      margin: 0 auto;\n      display: block;\n    }\n\n    ::slotted([slot=pointer]) {\n      display: none;\n    }\n\n    knob > slot {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      display: block;\n    }\n  </style>\n";const D=class extends k{constructor(){super(),this.shadowRoot.append(E.content.cloneNode(!0))}},M=document.createElement("template");M.innerHTML="\n  <style>\n    slot[name=pointer] {\n      margin-top: 5%;\n      border-radius: 50%;\n      width: 10%;\n      height: 10%;\n      background: currentColor;\n    }\n  </style>\n";r(class extends D{constructor(){super(),this.shadowRoot.append(M.content.cloneNode(!0))}},"knob-dot");const T=document.createElement("template");T.innerHTML="\n  <style>\n    slot[name=pointer] {\n      transform: rotate(45deg);\n      margin-top: 5%;\n      width: 10%;\n      height: 10%;\n      background-image: linear-gradient(\n        135deg,\n        currentColor 50%,\n        transparent 50%\n      );\n    }\n  </style>\n";r(class extends D{constructor(){super(),this.shadowRoot.append(T.content.cloneNode(!0))}},"knob-triangle");const C=document.createElement("template");C.innerHTML="\n  <style>\n    slot[name=pointer] {\n      width: 3%;\n      height: 15%;\n      background: currentColor;\n    }\n  </style>\n";r(class extends D{constructor(){super(),this.shadowRoot.append(C.content.cloneNode(!0))}},"knob-line")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,