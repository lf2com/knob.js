(()=>{"use strict";var e;!function(e){e.spinStart="spinstart",e.spining="spining",e.spinEnd="spinend",e.change="change",e.changed="changed"}(e||(e={}));const t=e;function n(e,t,n,r){t.forEach((t=>{!function(e,t,n,r){e.addEventListener(t,n,r)}(e,t,n,r)}))}function r(e,t,n,r){t.forEach((t=>{e.removeEventListener(t,n,r)}))}function s(e,t,n){return t.every((t=>function(e,t,n){return e.dispatchEvent(new CustomEvent(t,n))}(e,t,n)))}const i=function(e){if(e instanceof MouseEvent)return{x:e.clientX,y:e.clientY};if(e instanceof TouchEvent){const{touches:[t]}=e;return{x:t.clientX,y:t.clientY}}throw new ReferenceError(`Illegal event: ${e}`)},{PI:a,hypot:o,asin:d}=Math,c={x:0,y:0};function h(e,t=c){return e.y<t.y?e.x>t.x?1:2:e.x<t.x?3:e.y>t.y?4:1}function g(e,t=c,n=h(e,t)){const r=e.x-t.x,s=e.y-t.y,i=o(r,s);switch(n){default:case 1:return d(-s/i);case 2:return d(-r/i);case 3:return d(s/i);case 4:return d(r/i)}}const u=["mousedown","touchstart"],m=["mousemove","touchmove"],l=["mouseup","touchend"],f=[t.spinStart],b=[t.spining,t.change],x=[t.spinEnd,t.changed];function p(e){const{degree:t}=this;if(!s(this,f,{detail:{degree:t,offsetDegree:0}}))return;const{top:o,right:d,bottom:c,left:u}=this.getBoundingClientRect(),p={x:(d+u)/2,y:(o+c)/2},v=i(e),E=h(v,p),w=g(v,p,E);let y=0,D=E,$=w;const k=e=>{const n=i(e),r=h(n,p),o=g(n,p,r),d=function(e,t,n,r){switch(n-e){default:case 0:return t-r;case-3:case 1:return r+(a/2-t);case-1:case 3:return t+(a/2-r);case-2:case 2:{const e=t+a-r;return e>a?2*a-e:e}}}(D,$,r,o);y+=d/a*180;const c=t+y,u=s(this,b,{detail:{degree:c,offsetDegree:y}});D=r,$=o,u&&(this.degree=c)},M=()=>{const{degree:e}=this,t={detail:{degree:e,offsetDegree:y}};r(document,m,k),r(document,l,M),s(this,x,t)};e.preventDefault(),n(document,m,k),n(document,l,M)}var v;!function(e){e.disabled="disabled",e.degree="degree",e.minDegree="min",e.maxDegree="max"}(v||(v={}));const E=v,{isNaN:w}=globalThis,y=document.createElement("template");y.innerHTML="\n<style>\n  :host {\n    display: inline-block;\n    transform: rotate(var(--degree));\n  }\n</style>\n<slot>\n</slot>\n";class D extends HTMLElement{static get nodeName(){return"knob-base"}#disabled=!1;#minDegree=-1/0;#maxDegree=1/0;#degree=0;constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.append(y.content.cloneNode(!0)),Object.values(E).forEach((e=>{this.attributeChangedCallback(e)}))}static get observedAttributes(){return[E.disabled,E.minDegree,E.maxDegree,E.degree]}attributeChangedCallback(e){switch(e){default:break;case E.disabled:this.disabled=this.hasAttribute(E.disabled);break;case E.minDegree:this.min=Number(this.getAttribute(E.minDegree)??-1/0),this.degree=Math.max(this.min,this.degree);break;case E.maxDegree:this.max=Number(this.getAttribute(E.maxDegree)??1/0),this.degree=Math.min(this.max,this.degree);break;case E.degree:this.degree=Number(this.getAttribute(E.degree)??0)}}get disabled(){return this.#disabled}set disabled(e){const t=Boolean(e);t?r(this,u,p):n(this,u,p),this.#disabled=t}get min(){return this.#minDegree}set min(e){if(w(e))throw new TypeError(`Invalid min degree: ${e}`);if(this.max<e)throw new RangeError(`Unable to set min degree that is greater than max degree: ${e} > ${this.max}`);this.#minDegree=e}get max(){return this.#maxDegree}set max(e){if(w(e))throw new TypeError(`Invalid max degree: ${e}`);if(this.min>e)throw new RangeError(`Unable to set max degree that is less than min degree: ${e} < ${this.min}`);this.#maxDegree=e}get degree(){return this.#degree}set degree(e){if(e===this.degree)return;if(w(e))throw new TypeError(`Invalid degree: ${e}`);const t=Math.max(Math.min(e,this.max),this.min);this.style.setProperty("--degree",`${t}deg`),this.#degree=t}get value(){return this.degree}set value(e){this.degree=e}}const $=D,k=$.nodeName;customElements.get(k)?console.warn(`Already defined <${k}>`):customElements.define(k,$),customElements.whenDefined(k).then((()=>{console.info(`Knob.js is defined as <${k}>`)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,