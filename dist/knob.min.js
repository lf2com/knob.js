(()=>{"use strict";function e(e,t,n,r){t.forEach((t=>{!function(e,t,n,r){e.addEventListener(t,n,r)}(e,t,n,r)}))}function t(e,t,n,r){t.forEach((t=>{e.removeEventListener(t,n,r)}))}function n(e,t,n){return e.dispatchEvent(new CustomEvent(t,n))}const r=function(e,t){return customElements.get(t)?Promise.reject(new Error(`Already defined <${t}>`)):(customElements.define(t,e),customElements.whenDefined(t))},s=function(e,t){return e instanceof DOMPoint?DOMPoint.fromPoint(e):new DOMPoint(e,t)},o=s;var i;!function(e){e.spinStart="spinstart",e.spinning="spinning",e.spinEnd="spinend",e.change="change"}(i||(i={}));const a=i,d=function(e){const{clientX:t,clientY:n}=e;return s(t,n)},{PI:c,hypot:l,asin:u}=Math,h=o(0,0);function m(e,t=h){return e.y<t.y?e.x>t.x?1:2:e.x<t.x?3:e.y>t.y?4:1}function g(e,t=h,n=m(e,t)){const r=e.x-t.x,s=e.y-t.y,o=l(r,s);switch(n){default:case 1:return u(-s/o);case 2:return u(-r/o);case 3:return u(s/o);case 4:return u(r/o)}}const b=["pointerdown"],p=["pointermove"],f=["pointerup"];function x(r){const{degree:s}=this;if(!n(this,a.spinStart,{bubbles:!0,cancelable:!0,composed:!0,detail:{degree:s,lastDegree:s,offsetDegree:0}}))return;const{top:i,right:l,bottom:u,left:h}=this.getBoundingClientRect(),b=o((l+h)/2,(i+u)/2),x=d(r),y=m(x,b),k=g(x,b,y);let v=0,w=y,E=k;const A=e=>{const t=d(e),r=m(t,b),o=g(t,b,r),i=function(e,t,n,r){switch(n-e){default:case 0:return t-r;case-3:case 1:return t-r-c/2;case-1:case 3:return t-r+c/2;case-2:case 2:{const e=t+c-r;return e>c?2*c-e:e}}}(w,E,r,o),l=i/c*180,{degree:u}=this;v+=l;const h=s+v,p=n(this,a.spinning,{bubbles:!0,cancelable:!0,composed:!0,detail:{degree:h,lastDegree:u,offsetDegree:v}});w=r,E=o,p&&(this.degree=h)},M=()=>{const{degree:e}=this;t(document,p,A),t(document,f,M),n(this,a.spinEnd,{bubbles:!0,cancelable:!1,composed:!0,detail:{degree:e,lastDegree:s,offsetDegree:v}})};r.preventDefault(),e(document,p,A),e(document,f,M)}var y;!function(e){e.disabled="disabled",e.degree="degree",e.min="min",e.max="max"}(y||(y={}));const k=y,{isNaN:v}=globalThis,w=document.createElement("template"),E={[k.degree]:0,[k.min]:-1/0,[k.max]:1/0};w.innerHTML='\n  <style>\n    :host {\n      position: relative;\n      display: inline-block;\n      vertical-align: text-bottom;\n    }\n\n    knob {\n      transform: rotate(var(--degree));\n      width: 100%;\n      height: 100%;\n      display: block;\n    }\n  </style>\n  <knob>\n    <slot></slot>\n    <cover>\n      <slot name="pointer"></slot>\n    </cover>\n  </knob>\n';class A extends HTMLElement{constructor(){super();const e=this.attachShadow({mode:"open"});e.append(w.content.cloneNode(!0)),this.knobElement=e.querySelector("knob"),A.observedAttributes.forEach((e=>{this.attributeChangedCallback(e)}))}static get observedAttributes(){return[k.disabled,k.min,k.max,k.degree]}attributeChangedCallback(e){switch(e){default:break;case k.disabled:this.disabled=this.hasAttribute(k.disabled);break;case k.min:{const e=Number(this.getAttribute(k.min)??E[k.min]);this.min=e,this.degree=Math.max(e,this.degree);break}case k.max:{const e=Number(this.getAttribute(k.max)??E[k.max]);this.max=e,this.degree=Math.min(e,this.degree);break}case k.degree:this.degree=Number(this.getAttribute(k.degree)??E[k.degree])}}get disabled(){return this.hasAttribute(k.disabled)}set disabled(n){n?(t(this,b,x),this.setAttribute(k.disabled,"")):(e(this,b,x),this.removeAttribute(k.disabled))}get min(){const e=this.getAttribute(k.min);return null===e?E[k.min]:Number(e)}set min(e){if(v(e))throw new TypeError(`Invalid min degree: ${e}`);if(e!==this.min&&(this.setAttribute(k.min,`${e}`),this.max<e))throw new RangeError("Setting min degree that is greater than max degree might cause spinning error")}get max(){const e=this.getAttribute(k.max);return null===e?E[k.max]:Number(e)}set max(e){if(v(e))throw new TypeError(`Invalid max degree: ${e}`);if(e!==this.max&&(this.setAttribute(k.max,`${e}`),this.min>e))throw new RangeError("Setting max degree that is less than min degree might cause spinning error")}get degree(){const e=this.getAttribute(k.degree);return null===e?E[k.degree]:Number(e)}set degree(e){if(v(e))throw new TypeError(`Invalid degree: ${e}`);const{degree:t,min:r,max:s}=this,o=Math.max(r,Math.min(e,s));o!==t&&(this.knobElement.style.setProperty("--degree",`${o}deg`),this.setAttribute(k.degree,`${o}`),n(this,a.change,{bubbles:!0,cancelable:!1,composed:!0,detail:{degree:o,lastDegree:t,offsetDegree:o-t}}))}get value(){return this.degree}set value(e){this.degree=e}}r(A,"knob-base");const M=A,D=document.createElement("template");D.innerHTML="\n  <style>\n    :host {\n      --size: 80px;\n      \n      width: var(--size);\n      height: var(--size);\n    }\n\n    knob {\n      position: relative;\n      border-radius: 50%;\n      box-sizing: border-box;\n      border: 1px solid currentColor;\n      background: #f3f3f3;\n      color: #aaa;\n      overflow: hidden;\n    }\n\n    knob:hover,\n    knob:active {\n      color: #888;\n      background: #eee;\n    }\n\n    cover {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      display: flex;\n      z-index: 1;\n    }\n\n    slot[name=pointer] {\n      margin: 0 auto;\n      display: block;\n    }\n\n    ::slotted([slot=pointer]) {\n      display: none;\n    }\n\n    knob > slot {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      display: block;\n    }\n  </style>\n";const N=class extends M{constructor(){super(),this.shadowRoot.append(D.content.cloneNode(!0))}},C=document.createElement("template");C.innerHTML="\n  <style>\n    slot[name=pointer] {\n      margin-top: 5%;\n      border-radius: 50%;\n      width: 10%;\n      height: 10%;\n      background: currentColor;\n    }\n  </style>\n";r(class extends N{constructor(){super(),this.shadowRoot.append(C.content.cloneNode(!0))}},"knob-dot");const T=document.createElement("template");T.innerHTML="\n  <style>\n    slot[name=pointer] {\n      transform: rotate(45deg);\n      margin-top: 5%;\n      width: 10%;\n      height: 10%;\n      background-image: linear-gradient(\n        135deg,\n        currentColor 50%,\n        transparent 50%\n      );\n    }\n  </style>\n";r(class extends N{constructor(){super(),this.shadowRoot.append(T.content.cloneNode(!0))}},"knob-triangle");const L=document.createElement("template");L.innerHTML="\n  <style>\n    slot[name=pointer] {\n      width: 3%;\n      height: 15%;\n      background: currentColor;\n    }\n  </style>\n";r(class extends N{constructor(){super(),this.shadowRoot.append(L.content.cloneNode(!0))}},"knob-line")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QzlDLEtBQUsrQyxXQUNIRyxPQUFPWixFQUFTYSxRQUFRQyxXQUFVLE1BeEJ4QixpQkE4QmpCLE1DN0JNZCxFQUFXTCxTQUFTTSxjQUFjLFlBRXhDRCxFQUFTSSxVQUFhLG9JQW1CdEI4QixFQVRBLGNBQXVCQyxFQUNyQjVCLGNBQ0VDLFFBRUM5QyxLQUFLK0MsV0FDSEcsT0FBT1osRUFBU2EsUUFBUUMsV0FBVSxNQWxCeEIsYyIsInNvdXJjZXMiOlsid2VicGFjazovL0BsZjJjb20va25vYi5qcy8uL3NyYy91dGlscy9ldmVudEhhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vQGxmMmNvbS9rbm9iLmpzLy4vc3JjL3V0aWxzL3JlZ2lzdGVyRWxlbWVudC50cyIsIndlYnBhY2s6Ly9AbGYyY29tL2tub2IuanMvLi9zcmMvdHlwZXMvUG9pbnQudHMiLCJ3ZWJwYWNrOi8vQGxmMmNvbS9rbm9iLmpzLy4vc3JjL3ZhbHVlcy9ldmVudC50cyIsIndlYnBhY2s6Ly9AbGYyY29tL2tub2IuanMvLi9zcmMvdXRpbHMvZ2V0RXZlbnRYWS50cyIsIndlYnBhY2s6Ly9AbGYyY29tL2tub2IuanMvLi9zcmMvdXRpbHMvcmFkaXVzQW5kRGVncmVlLnRzIiwid2VicGFjazovL0BsZjJjb20va25vYi5qcy8uL3NyYy91dGlscy9zcGluTGlzdGVuZXIudHMiLCJ3ZWJwYWNrOi8vQGxmMmNvbS9rbm9iLmpzLy4vc3JjL3ZhbHVlcy9hdHRyaWJ1dGUudHMiLCJ3ZWJwYWNrOi8vQGxmMmNvbS9rbm9iLmpzLy4vc3JjL2tub2IudHMiLCJ3ZWJwYWNrOi8vQGxmMmNvbS9rbm9iLmpzLy4vc3JjL2tub2JzL2Jhc2ljLnRzIiwid2VicGFjazovL0BsZjJjb20va25vYi5qcy8uL3NyYy9rbm9icy9kb3QudHMiLCJ3ZWJwYWNrOi8vQGxmMmNvbS9rbm9iLmpzLy4vc3JjL2tub2JzL3RyaWFuZ2xlLnRzIiwid2VicGFjazovL0BsZjJjb20va25vYi5qcy8uL3NyYy9rbm9icy9saW5lLnRzIl0sInNvdXJjZXNDb250ZW50IjpbInR5cGUgRXZlbnRIb2xkZXIgPSBIVE1MRWxlbWVudCB8IERvY3VtZW50IHwgV2luZG93O1xudHlwZSBFdmVudExpc3RlbmVyID0gKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkO1xuXG5pbnRlcmZhY2UgRXZlbnRMaXN0ZW5lck9wdGlvbnMge1xuICBjYXB0dXJlPzogYm9vbGVhbjtcbiAgb25jZT86IGJvb2xlYW47XG4gIHBhc3NpdmU/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEFkZHMgZXZlbnQgb2YgdHlwZSB0byBlbGVtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihcbiAgcmVmOiBFdmVudEhvbGRlcixcbiAgdHlwZTogc3RyaW5nLFxuICBsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcixcbiAgb3B0aW9ucz86IEV2ZW50TGlzdGVuZXJPcHRpb25zLFxuKTogdm9pZCB7XG4gIHJlZi5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBBZGRzIGV2ZW50cyBvZiB0eXBlcyB0byBlbGVtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcnMoXG4gIHJlZjogRXZlbnRIb2xkZXIsXG4gIHR5cGVzOiBzdHJpbmdbXSxcbiAgbGlzdGVuZXI6IEV2ZW50TGlzdGVuZXIsXG4gIG9wdGlvbnM/OiBFdmVudExpc3RlbmVyT3B0aW9ucyxcbik6IHZvaWQge1xuICB0eXBlcy5mb3JFYWNoKCh0eXBlKSA9PiB7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcihyZWYsIHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgfSk7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBldmVudCBvZiB0eXBlIGZyb20gZWxlbWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gIHJlZjogRXZlbnRIb2xkZXIsXG4gIHR5cGU6IHN0cmluZyxcbiAgbGlzdGVuZXI6IEV2ZW50TGlzdGVuZXIsXG4gIG9wdGlvbnM/OiBFdmVudExpc3RlbmVyT3B0aW9ucyxcbik6IHZvaWQge1xuICByZWYucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBldmVudHMgb2YgdHlwZXMgZnJvbSBlbGVtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoXG4gIHJlZjogRXZlbnRIb2xkZXIsXG4gIHR5cGVzOiBzdHJpbmdbXSxcbiAgbGlzdGVuZXI6IEV2ZW50TGlzdGVuZXIsXG4gIG9wdGlvbnM/OiBFdmVudExpc3RlbmVyT3B0aW9ucyxcbik6IHZvaWQge1xuICB0eXBlcy5mb3JFYWNoKCh0eXBlKSA9PiB7XG4gICAgcmVmLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpO1xuICB9KTtcbn1cblxuaW50ZXJmYWNlIEN1c3RvbUV2ZW50SW5pdDxUPiB7XG4gIGRldGFpbD86IFQ7XG4gIGJ1YmJsZXM/OiBib29sZWFuO1xuICBjYW5jZWxhYmxlPzogYm9vbGVhbjtcbiAgY29tcG9zZWQ/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIFRyaWdnZXJzIGV2ZW50IGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZSBldmVudCBpcyBjYW5jZWxsZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmlnZ2VyRXZlbnQ8VD4oXG4gIHJlZjogRXZlbnRIb2xkZXIsXG4gIHR5cGU6IHN0cmluZyxcbiAgb3B0aW9ucz86IEN1c3RvbUV2ZW50SW5pdDxUPixcbik6IGJvb2xlYW4ge1xuICByZXR1cm4gcmVmLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KHR5cGUsIG9wdGlvbnMpKTtcbn1cblxuLyoqXG4gKiBUcmlnZ2VycyBldmVudHMgYW5kIHJldHVybnMgZmFsc2UgaWYgYW55IG9mIHRoZSBldmVudCBpc1xuICogY2FuY2VsbGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJpZ2dlckV2ZW50czxUPihcbiAgcmVmOiBFdmVudEhvbGRlcixcbiAgdHlwZXM6IHN0cmluZ1tdLFxuICBvcHRpb25zPzogQ3VzdG9tRXZlbnRJbml0PFQ+LFxuKTogYm9vbGVhbiB7XG4gIHJldHVybiB0eXBlcy5ldmVyeSgodHlwZSkgPT4gdHJpZ2dlckV2ZW50KHJlZiwgdHlwZSwgb3B0aW9ucykpO1xufVxuIiwiLyoqXG4gKiBSZWdpc3RlcnMgS25vYiBlbGVtZW50LlxuICovXG5mdW5jdGlvbiByZWdpc3RlckVsZW1lbnQoXG4gIE5vZGU6IHR5cGVvZiBIVE1MRWxlbWVudCxcbiAgbm9kZU5hbWU6IHN0cmluZyxcbik6IFJldHVyblR5cGU8dHlwZW9mIGN1c3RvbUVsZW1lbnRzLndoZW5EZWZpbmVkPiB7XG4gIGlmIChjdXN0b21FbGVtZW50cy5nZXQobm9kZU5hbWUpKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgbmV3IEVycm9yKGBBbHJlYWR5IGRlZmluZWQgPCR7bm9kZU5hbWV9PmApLFxuICAgICk7XG4gIH1cblxuICBjdXN0b21FbGVtZW50cy5kZWZpbmUobm9kZU5hbWUsIE5vZGUpO1xuXG4gIHJldHVybiBjdXN0b21FbGVtZW50cy53aGVuRGVmaW5lZChub2RlTmFtZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlZ2lzdGVyRWxlbWVudDtcbiIsImludGVyZmFjZSBDcmVhdGVQb2ludCB7XG4gICh4OiBudW1iZXIsIHk6IG51bWJlcik6IERPTVBvaW50O1xuICAocG9pbnQ6IERPTVBvaW50KTogRE9NUG9pbnQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBwb2ludCBvYmplY3QgZnJvbSBhIHBvaW50IG9yICh4LCB5KS5cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVBvaW50OiBDcmVhdGVQb2ludCA9IGZ1bmN0aW9uIGNyZWF0ZVBvaW50KFxuICB4OiBudW1iZXIgfCBET01Qb2ludCxcbiAgeT86IG51bWJlcixcbikge1xuICBpZiAoeCBpbnN0YW5jZW9mIERPTVBvaW50KSB7XG4gICAgcmV0dXJuIERPTVBvaW50LmZyb21Qb2ludCh4KTtcbiAgfVxuXG4gIHJldHVybiBuZXcgRE9NUG9pbnQoeCwgeSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVQb2ludDtcbiIsImVudW0gRXZlbnQge1xuICBzcGluU3RhcnQgPSAnc3BpbnN0YXJ0JyxcbiAgc3Bpbm5pbmcgPSAnc3Bpbm5pbmcnLFxuICBzcGluRW5kID0gJ3NwaW5lbmQnLFxuICBjaGFuZ2UgPSAnY2hhbmdlJyxcbn1cblxuZXhwb3J0IGRlZmF1bHQgRXZlbnQ7XG4iLCJpbXBvcnQgeyBjcmVhdGVQb2ludCB9IGZyb20gJy4uL3R5cGVzL1BvaW50JztcblxuLyoqXG4gKiBSZXR1cm5zICh4LCB5KSBvZiBtb3VzdC90b3VjaCBldmVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0RXZlbnRYWShldmVudDogUG9pbnRlckV2ZW50KTogRE9NUG9pbnQge1xuICBjb25zdCB7IGNsaWVudFgsIGNsaWVudFkgfSA9IGV2ZW50O1xuXG4gIHJldHVybiBjcmVhdGVQb2ludChjbGllbnRYLCBjbGllbnRZKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0RXZlbnRYWTtcbiIsImltcG9ydCBjcmVhdGVQb2ludCBmcm9tICcuLi90eXBlcy9Qb2ludCc7XG5cbmNvbnN0IHsgUEksIGh5cG90LCBhc2luIH0gPSBNYXRoO1xuY29uc3Qgb3JpZ2luRE9NUG9pbnQ6IERPTVBvaW50ID0gY3JlYXRlUG9pbnQoMCwgMCk7XG5cbnR5cGUgUXVhZHJhbnQgPSAxIHwgMiB8IDMgfCA0O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHF1YWRyYW50IFsxLCA0XSBvZiBwb2ludCBmcm9tIGNlbnRlci4gVGhlIHZhbHVlXG4gKiBpcyBiYXNlZCBvbiByYWRpdXM6IFExID0gWzAsIFBJIC8gMiksIFEyID0gW1BJIC8gMiwgUEkpLFxuICogUTMgPSBbUEksICgzICogUEkpIC8gMiksIFE0ID0gWygzICogUEkpIC8gMiwgMiAqIFBJKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFF1YWRyYW50KFxuICBwb2ludDogRE9NUG9pbnQsXG4gIGNlbnRlcjogRE9NUG9pbnQgPSBvcmlnaW5ET01Qb2ludCxcbik6IFF1YWRyYW50IHtcbiAgaWYgKHBvaW50LnkgPCBjZW50ZXIueSkge1xuICAgIHJldHVybiBwb2ludC54ID4gY2VudGVyLnggPyAxIDogMjtcbiAgfVxuICBpZiAocG9pbnQueCA8IGNlbnRlci54KSB7XG4gICAgcmV0dXJuIDM7XG4gIH1cblxuICByZXR1cm4gcG9pbnQueSA+IGNlbnRlci55ID8gNCA6IDE7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcmFkaXVzIHZhbHVlIHN0YXJ0aW5nIGZyb20gdGhlIHF1YWRyYW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmFkaXVzT2ZRdWFkcmFudChcbiAgcG9pbnQ6IERPTVBvaW50LFxuICBjZW50ZXI6IERPTVBvaW50ID0gb3JpZ2luRE9NUG9pbnQsXG4gIHF1YWRyYW50ID0gZ2V0UXVhZHJhbnQocG9pbnQsIGNlbnRlciksXG4pOiBudW1iZXIge1xuICBjb25zdCBkaWZmWCA9IHBvaW50LnggLSBjZW50ZXIueDtcbiAgY29uc3QgZGlmZlkgPSBwb2ludC55IC0gY2VudGVyLnk7XG4gIGNvbnN0IGxlbmd0aCA9IGh5cG90KGRpZmZYLCBkaWZmWSk7XG5cbiAgc3dpdGNoIChxdWFkcmFudCkge1xuICAgIGRlZmF1bHQ6XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIGFzaW4oLWRpZmZZIC8gbGVuZ3RoKTtcblxuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiBhc2luKC1kaWZmWCAvIGxlbmd0aCk7XG5cbiAgICBjYXNlIDM6XG4gICAgICByZXR1cm4gYXNpbihkaWZmWSAvIGxlbmd0aCk7XG5cbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gYXNpbihkaWZmWCAvIGxlbmd0aCk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHBvc2l0aXZlIHZhbHVlIGZvciBjbG9ja3dpc2UsIG5lZ2F0aXZlIHZhbHVlIGZvclxuICogY291bnRlcmNsb2Nrd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERpZmZSYWRpdXMoXG4gIGxhc3RRdWFkcmFudDogUXVhZHJhbnQsXG4gIGxhc3RSYWRpdXM6IG51bWJlcixcbiAgbmV4dFF1YWRyYW50OiBRdWFkcmFudCxcbiAgbmV4dFJhZGl1czogbnVtYmVyLFxuKTogbnVtYmVyIHtcbiAgc3dpdGNoIChuZXh0UXVhZHJhbnQgLSBsYXN0UXVhZHJhbnQpIHtcbiAgICBkZWZhdWx0OlxuICAgIGNhc2UgMDpcbiAgICAgIC8vIHRoZSBzYW1lIHF1YWRyYW50XG4gICAgICByZXR1cm4gbGFzdFJhZGl1cyAtIG5leHRSYWRpdXM7XG5cbiAgICBjYXNlIC0zOlxuICAgIGNhc2UgMTpcbiAgICAgIC8vIHRvIHRoZSBuZXh0IHF1YWRyYW50XG4gICAgICByZXR1cm4gbGFzdFJhZGl1cyAtIG5leHRSYWRpdXMgLSBQSSAvIDI7XG5cbiAgICBjYXNlIC0xOlxuICAgIGNhc2UgMzpcbiAgICAgIC8vIHRvIHRoZSBwcmV2IHF1YWRyYW50XG4gICAgICByZXR1cm4gbGFzdFJhZGl1cyAtIG5leHRSYWRpdXMgKyBQSSAvIDI7XG5cbiAgICBjYXNlIC0yOlxuICAgIGNhc2UgMjoge1xuICAgICAgLy8gdG8gdGhlIGRpYWdvbmFsIHF1YWRyYW50XG4gICAgICBjb25zdCByYWRpdXMgPSBsYXN0UmFkaXVzICsgUEkgLSBuZXh0UmFkaXVzO1xuXG4gICAgICByZXR1cm4gcmFkaXVzID4gUEkgPyAyICogUEkgLSByYWRpdXMgOiByYWRpdXM7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ29udmVydHMgcmFkaXVzIHRvIGRlZ3Jlc3MuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYWRpdXNUb0RlZ3JlZShyYWRpdXM6IG51bWJlcik6IG51bWJlciB7XG4gIHJldHVybiAxODAgKiAocmFkaXVzIC8gUEkpO1xufVxuIiwiaW1wb3J0IEtub2IgZnJvbSAnLi4va25vYic7XG5pbXBvcnQgY3JlYXRlUG9pbnQgZnJvbSAnLi4vdHlwZXMvUG9pbnQnO1xuaW1wb3J0IEV2ZW50IGZyb20gJy4uL3ZhbHVlcy9ldmVudCc7XG5pbXBvcnQgeyBhZGRFdmVudExpc3RlbmVycywgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMsIHRyaWdnZXJFdmVudCB9IGZyb20gJy4vZXZlbnRIYW5kbGVyJztcbmltcG9ydCBnZXRFdmVudFhZIGZyb20gJy4vZ2V0RXZlbnRYWSc7XG5pbXBvcnQge1xuICBnZXREaWZmUmFkaXVzLCBnZXRRdWFkcmFudCwgZ2V0UmFkaXVzT2ZRdWFkcmFudCwgcmFkaXVzVG9EZWdyZWUsXG59IGZyb20gJy4vcmFkaXVzQW5kRGVncmVlJztcblxuY29uc3QgRVZFTlRfVE9VQ0hfU1RBUlQgPSBbJ3BvaW50ZXJkb3duJ107XG5jb25zdCBFVkVOVF9UT1VDSF9NT1ZFID0gWydwb2ludGVybW92ZSddO1xuY29uc3QgRVZFTlRfVE9VQ0hfRU5EID0gWydwb2ludGVydXAnXTtcblxuZXhwb3J0IGludGVyZmFjZSBTcGluRXZlbnREZXRhaWwge1xuICBkZWdyZWU6IG51bWJlcjtcbiAgbGFzdERlZ3JlZTogbnVtYmVyO1xuICBvZmZzZXREZWdyZWU6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBIYW5kbGVzIHNwaW5zdGFydCBldmVudCBiaW5kZWQgd2l0aCBtb3VzZXN0YXJ0L3RvdWNoc3RhcnRcbiAqIGV2ZW50cy5cbiAqL1xuZnVuY3Rpb24gc3BpblN0YXJ0TGlzdGVuZXIoXG4gIHRoaXM6IEtub2IsXG4gIGV2ZW50OiBQb2ludGVyRXZlbnQsXG4pOiB2b2lkIHtcbiAgY29uc3Qge1xuICAgIGRlZ3JlZTogc3RhcnREZWdyZWUsXG4gIH0gPSB0aGlzO1xuICBjb25zdCBwYXNzZWRTdGFydEV2ZW50ID0gdHJpZ2dlckV2ZW50PFNwaW5FdmVudERldGFpbD4oXG4gICAgdGhpcyxcbiAgICBFdmVudC5zcGluU3RhcnQsXG4gICAge1xuICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgIGRldGFpbDoge1xuICAgICAgICBkZWdyZWU6IHN0YXJ0RGVncmVlLFxuICAgICAgICBsYXN0RGVncmVlOiBzdGFydERlZ3JlZSxcbiAgICAgICAgb2Zmc2V0RGVncmVlOiAwLFxuICAgICAgfSxcbiAgICB9LFxuICApO1xuXG4gIGlmICghcGFzc2VkU3RhcnRFdmVudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHtcbiAgICB0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQsXG4gIH0gPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBjb25zdCBjZW50ZXIgPSBjcmVhdGVQb2ludChcbiAgICAocmlnaHQgKyBsZWZ0KSAvIDIsXG4gICAgKHRvcCArIGJvdHRvbSkgLyAyLFxuICApO1xuICBjb25zdCBzdGFydFByZXNzUG9pbnQgPSBnZXRFdmVudFhZKGV2ZW50KTtcbiAgY29uc3Qgc3RhcnRQcmVzc1F1YWRyYW50ID0gZ2V0UXVhZHJhbnQoXG4gICAgc3RhcnRQcmVzc1BvaW50LFxuICAgIGNlbnRlcixcbiAgKTtcbiAgY29uc3Qgc3RhcnRQcmVzc1JhZGl1cyA9IGdldFJhZGl1c09mUXVhZHJhbnQoXG4gICAgc3RhcnRQcmVzc1BvaW50LFxuICAgIGNlbnRlcixcbiAgICBzdGFydFByZXNzUXVhZHJhbnQsXG4gICk7XG5cbiAgbGV0IHRvdGFsRGlmZkRlZ3JlZSA9IDA7XG4gIGxldCBsYXN0UXVhZHJhbnQgPSBzdGFydFByZXNzUXVhZHJhbnQ7XG4gIGxldCBsYXN0UmFkaXVzID0gc3RhcnRQcmVzc1JhZGl1cztcblxuICAvKipcbiAgICogSGFuZGxlcyBzcGlubmluZy9jaGFuZ2luZyBldmVudHMgYmluZGVkIHdpdGhcbiAgICogbW91c2Vtb3ZlL3RvdWNobW92ZSBldmVudHMuXG4gICAqL1xuICBjb25zdCBzcGlubmluZ0xpc3RlbmVyID0gKGV2dDogUG9pbnRlckV2ZW50KSA9PiB7XG4gICAgY29uc3QgcHJlc3NQb2ludCA9IGdldEV2ZW50WFkoZXZ0KTtcbiAgICBjb25zdCBwcmVzc1F1YWRyYW50ID0gZ2V0UXVhZHJhbnQoXG4gICAgICBwcmVzc1BvaW50LFxuICAgICAgY2VudGVyLFxuICAgICk7XG4gICAgY29uc3QgcHJlc3NSYWRpdXMgPSBnZXRSYWRpdXNPZlF1YWRyYW50KFxuICAgICAgcHJlc3NQb2ludCxcbiAgICAgIGNlbnRlcixcbiAgICAgIHByZXNzUXVhZHJhbnQsXG4gICAgKTtcbiAgICBjb25zdCBkaWZmUmFkaXVzID0gZ2V0RGlmZlJhZGl1cyhcbiAgICAgIGxhc3RRdWFkcmFudCxcbiAgICAgIGxhc3RSYWRpdXMsXG4gICAgICBwcmVzc1F1YWRyYW50LFxuICAgICAgcHJlc3NSYWRpdXMsXG4gICAgKTtcbiAgICBjb25zdCBkaWZmRGVncmVlID0gcmFkaXVzVG9EZWdyZWUoZGlmZlJhZGl1cyk7XG4gICAgY29uc3Qge1xuICAgICAgZGVncmVlOiBsYXN0RGVncmVlLFxuICAgIH0gPSB0aGlzO1xuXG4gICAgdG90YWxEaWZmRGVncmVlICs9IGRpZmZEZWdyZWU7XG5cbiAgICBjb25zdCBuZXh0RGVncmVlID0gc3RhcnREZWdyZWUgKyB0b3RhbERpZmZEZWdyZWU7XG4gICAgY29uc3QgcGFzc2VkTW92ZUV2ZW50ID0gdHJpZ2dlckV2ZW50PFNwaW5FdmVudERldGFpbD4oXG4gICAgICB0aGlzLFxuICAgICAgRXZlbnQuc3Bpbm5pbmcsXG4gICAgICB7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICAgIGNvbXBvc2VkOiB0cnVlLFxuICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICBkZWdyZWU6IG5leHREZWdyZWUsXG4gICAgICAgICAgbGFzdERlZ3JlZSxcbiAgICAgICAgICBvZmZzZXREZWdyZWU6IHRvdGFsRGlmZkRlZ3JlZSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgKTtcblxuICAgIGxhc3RRdWFkcmFudCA9IHByZXNzUXVhZHJhbnQ7XG4gICAgbGFzdFJhZGl1cyA9IHByZXNzUmFkaXVzO1xuXG4gICAgaWYgKCFwYXNzZWRNb3ZlRXZlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmRlZ3JlZSA9IG5leHREZWdyZWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgc3BpbmVuZC9jaGFuZ2VkIGV2ZW50cyBiaW5kZWQgd2l0aCBtb3VzZXVwL3RvdWNoZW5kXG4gICAqIGV2ZW50cy5cbiAgICovXG4gIGNvbnN0IHNwaW5FbmRMaXN0ZW5lciA9ICgpID0+IHtcbiAgICBjb25zdCB7IGRlZ3JlZSB9ID0gdGhpcztcblxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJzKGRvY3VtZW50LCBFVkVOVF9UT1VDSF9NT1ZFLCBzcGlubmluZ0xpc3RlbmVyKTtcbiAgICByZW1vdmVFdmVudExpc3RlbmVycyhkb2N1bWVudCwgRVZFTlRfVE9VQ0hfRU5ELCBzcGluRW5kTGlzdGVuZXIpO1xuICAgIHRyaWdnZXJFdmVudDxTcGluRXZlbnREZXRhaWw+KFxuICAgICAgdGhpcyxcbiAgICAgIEV2ZW50LnNwaW5FbmQsXG4gICAgICB7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGNhbmNlbGFibGU6IGZhbHNlLFxuICAgICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgZGVncmVlLFxuICAgICAgICAgIGxhc3REZWdyZWU6IHN0YXJ0RGVncmVlLFxuICAgICAgICAgIG9mZnNldERlZ3JlZTogdG90YWxEaWZmRGVncmVlLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICApO1xuICB9O1xuXG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGFkZEV2ZW50TGlzdGVuZXJzKGRvY3VtZW50LCBFVkVOVF9UT1VDSF9NT1ZFLCBzcGlubmluZ0xpc3RlbmVyKTtcbiAgYWRkRXZlbnRMaXN0ZW5lcnMoZG9jdW1lbnQsIEVWRU5UX1RPVUNIX0VORCwgc3BpbkVuZExpc3RlbmVyKTtcbn1cblxuLyoqXG4gKiBBZGRzIGxpc3RlbmVycyBvZiBLbm9iLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkU3Bpbkxpc3RlbmVycyhyZWY6IEtub2IpOiB2b2lkIHtcbiAgYWRkRXZlbnRMaXN0ZW5lcnMocmVmLCBFVkVOVF9UT1VDSF9TVEFSVCwgc3BpblN0YXJ0TGlzdGVuZXIpO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgbGlzdGVuZXJzIG9mIEtub2IuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVTcGluTGlzdGVuZXJzKHJlZjogS25vYik6IHZvaWQge1xuICByZW1vdmVFdmVudExpc3RlbmVycyhyZWYsIEVWRU5UX1RPVUNIX1NUQVJULCBzcGluU3RhcnRMaXN0ZW5lcik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNwaW5TdGFydExpc3RlbmVyO1xuIiwiZW51bSBBdHRyaWJ1dGUge1xuICBkaXNhYmxlZCA9ICdkaXNhYmxlZCcsXG4gIGRlZ3JlZSA9ICdkZWdyZWUnLFxuICBtaW4gPSAnbWluJyxcbiAgbWF4ID0gJ21heCcsXG59XG5cbmV4cG9ydCBkZWZhdWx0IEF0dHJpYnV0ZTtcbiIsImltcG9ydCB7IHRyaWdnZXJFdmVudCB9IGZyb20gJy4vdXRpbHMvZXZlbnRIYW5kbGVyJztcbmltcG9ydCByZWdpc3RlckVsZW1lbnQgZnJvbSAnLi91dGlscy9yZWdpc3RlckVsZW1lbnQnO1xuaW1wb3J0IHtcbiAgYWRkU3Bpbkxpc3RlbmVycywgcmVtb3ZlU3Bpbkxpc3RlbmVycywgU3BpbkV2ZW50RGV0YWlsLFxufSBmcm9tICcuL3V0aWxzL3NwaW5MaXN0ZW5lcic7XG5pbXBvcnQgQXR0cmlidXRlIGZyb20gJy4vdmFsdWVzL2F0dHJpYnV0ZSc7XG5pbXBvcnQgRXZlbnQgZnJvbSAnLi92YWx1ZXMvZXZlbnQnO1xuXG5jb25zdCBub2RlTmFtZSA9ICdrbm9iLWJhc2UnO1xuXG5jb25zdCB7IGlzTmFOIH0gPSBnbG9iYWxUaGlzO1xuY29uc3QgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyA9IHtcbiAgW0F0dHJpYnV0ZS5kZWdyZWVdOiAwLFxuICBbQXR0cmlidXRlLm1pbl06IC1JbmZpbml0eSxcbiAgW0F0dHJpYnV0ZS5tYXhdOiBJbmZpbml0eSxcbn07XG5cbnRlbXBsYXRlLmlubmVySFRNTCA9IGBcbiAgPHN0eWxlPlxuICAgIDpob3N0IHtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIHZlcnRpY2FsLWFsaWduOiB0ZXh0LWJvdHRvbTtcbiAgICB9XG5cbiAgICBrbm9iIHtcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKHZhcigtLWRlZ3JlZSkpO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG4gIDwvc3R5bGU+XG4gIDxrbm9iPlxuICAgIDxzbG90Pjwvc2xvdD5cbiAgICA8Y292ZXI+XG4gICAgICA8c2xvdCBuYW1lPVwicG9pbnRlclwiPjwvc2xvdD5cbiAgICA8L2NvdmVyPlxuICA8L2tub2I+XG5gO1xuXG5jbGFzcyBLbm9iIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBwcm90ZWN0ZWQga25vYkVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBjb25zdCBzaGFkb3dSb290ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG5cbiAgICBzaGFkb3dSb290LmFwcGVuZCh0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKSk7XG4gICAgdGhpcy5rbm9iRWxlbWVudCA9IHNoYWRvd1Jvb3QucXVlcnlTZWxlY3Rvcigna25vYicpIGFzIEhUTUxFbGVtZW50O1xuICAgIEtub2Iub2JzZXJ2ZWRBdHRyaWJ1dGVzLmZvckVhY2goKGF0dHJOYW1lKSA9PiB7XG4gICAgICB0aGlzLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhdHRyTmFtZSk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgQXR0cmlidXRlLmRpc2FibGVkLFxuICAgICAgQXR0cmlidXRlLm1pbixcbiAgICAgIEF0dHJpYnV0ZS5tYXgsXG4gICAgICBBdHRyaWJ1dGUuZGVncmVlLFxuICAgIF07XG4gIH1cblxuICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0ck5hbWU6IHN0cmluZykge1xuICAgIHN3aXRjaCAoYXR0ck5hbWUpIHtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEF0dHJpYnV0ZS5kaXNhYmxlZDpcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IHRoaXMuaGFzQXR0cmlidXRlKEF0dHJpYnV0ZS5kaXNhYmxlZCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEF0dHJpYnV0ZS5taW46IHtcbiAgICAgICAgY29uc3QgbWluID0gTnVtYmVyKFxuICAgICAgICAgIHRoaXMuZ2V0QXR0cmlidXRlKEF0dHJpYnV0ZS5taW4pXG4gICAgICAgICAgPz8gZGVmYXVsdEF0dHJpYnV0ZVZhbHVlc1tBdHRyaWJ1dGUubWluXSxcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLm1pbiA9IG1pbjtcbiAgICAgICAgdGhpcy5kZWdyZWUgPSBNYXRoLm1heChtaW4sIHRoaXMuZGVncmVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNhc2UgQXR0cmlidXRlLm1heDoge1xuICAgICAgICBjb25zdCBtYXggPSBOdW1iZXIoXG4gICAgICAgICAgdGhpcy5nZXRBdHRyaWJ1dGUoQXR0cmlidXRlLm1heClcbiAgICAgICAgICA/PyBkZWZhdWx0QXR0cmlidXRlVmFsdWVzW0F0dHJpYnV0ZS5tYXhdLFxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgICAgICB0aGlzLmRlZ3JlZSA9IE1hdGgubWluKG1heCwgdGhpcy5kZWdyZWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgY2FzZSBBdHRyaWJ1dGUuZGVncmVlOlxuICAgICAgICB0aGlzLmRlZ3JlZSA9IE51bWJlcihcbiAgICAgICAgICB0aGlzLmdldEF0dHJpYnV0ZShBdHRyaWJ1dGUuZGVncmVlKVxuICAgICAgICAgID8/IGRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXNbQXR0cmlidXRlLmRlZ3JlZV0sXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgS25vYiBpcyBkaXNhYmxlZC5cbiAgICovXG4gIGdldCBkaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5oYXNBdHRyaWJ1dGUoQXR0cmlidXRlLmRpc2FibGVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIEtub2IgZGlzYWJsZWQuXG4gICAqL1xuICBzZXQgZGlzYWJsZWQoZGlzYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgIHJlbW92ZVNwaW5MaXN0ZW5lcnModGhpcyk7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShBdHRyaWJ1dGUuZGlzYWJsZWQsICcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWRkU3Bpbkxpc3RlbmVycyh0aGlzKTtcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKEF0dHJpYnV0ZS5kaXNhYmxlZCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbWluIGRlZ3JlZS5cbiAgICovXG4gIGdldCBtaW4oKTogbnVtYmVyIHtcbiAgICBjb25zdCBtaW4gPSB0aGlzLmdldEF0dHJpYnV0ZShBdHRyaWJ1dGUubWluKTtcblxuICAgIHJldHVybiAobWluID09PSBudWxsXG4gICAgICA/IGRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXNbQXR0cmlidXRlLm1pbl1cbiAgICAgIDogTnVtYmVyKG1pbilcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgbWluIGRlZ3JlZS5cbiAgICovXG4gIHNldCBtaW4obWluOiBudW1iZXIpIHtcbiAgICBpZiAoaXNOYU4obWluKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBtaW4gZGVncmVlOiAke21pbn1gKTtcbiAgICB9XG4gICAgaWYgKG1pbiA9PT0gdGhpcy5taW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNldEF0dHJpYnV0ZShBdHRyaWJ1dGUubWluLCBgJHttaW59YCk7XG5cbiAgICBpZiAodGhpcy5tYXggPCBtaW4pIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFxuICAgICAgICAnU2V0dGluZyBtaW4gZGVncmVlIHRoYXQgaXMgZ3JlYXRlciB0aGFuIG1heCBkZWdyZWUgbWlnaHQgY2F1c2Ugc3Bpbm5pbmcgZXJyb3InLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBtYXggZGVncmVlLlxuICAgKi9cbiAgZ2V0IG1heCgpOiBudW1iZXIge1xuICAgIGNvbnN0IG1heCA9IHRoaXMuZ2V0QXR0cmlidXRlKEF0dHJpYnV0ZS5tYXgpO1xuXG4gICAgcmV0dXJuIChtYXggPT09IG51bGxcbiAgICAgID8gZGVmYXVsdEF0dHJpYnV0ZVZhbHVlc1tBdHRyaWJ1dGUubWF4XVxuICAgICAgOiBOdW1iZXIobWF4KVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBtYXggZGVncmVlLlxuICAgKi9cbiAgc2V0IG1heChtYXg6IG51bWJlcikge1xuICAgIGlmIChpc05hTihtYXgpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIG1heCBkZWdyZWU6ICR7bWF4fWApO1xuICAgIH1cbiAgICBpZiAobWF4ID09PSB0aGlzLm1heCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2V0QXR0cmlidXRlKEF0dHJpYnV0ZS5tYXgsIGAke21heH1gKTtcblxuICAgIGlmICh0aGlzLm1pbiA+IG1heCkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4gICAgICAgICdTZXR0aW5nIG1heCBkZWdyZWUgdGhhdCBpcyBsZXNzIHRoYW4gbWluIGRlZ3JlZSBtaWdodCBjYXVzZSBzcGlubmluZyBlcnJvcicsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGRlZ3JlZS5cbiAgICovXG4gIGdldCBkZWdyZWUoKTogbnVtYmVyIHtcbiAgICBjb25zdCBkZWdyZWUgPSB0aGlzLmdldEF0dHJpYnV0ZShBdHRyaWJ1dGUuZGVncmVlKTtcblxuICAgIHJldHVybiAoZGVncmVlID09PSBudWxsXG4gICAgICA/IGRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXNbQXR0cmlidXRlLmRlZ3JlZV1cbiAgICAgIDogTnVtYmVyKGRlZ3JlZSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgZGVncmVlLlxuICAgKi9cbiAgc2V0IGRlZ3JlZShkZWdyZWU6IG51bWJlcikge1xuICAgIGlmIChpc05hTihkZWdyZWUpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGRlZ3JlZTogJHtkZWdyZWV9YCk7XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgZGVncmVlOiBsYXN0RGVncmVlLFxuICAgICAgbWluLFxuICAgICAgbWF4LFxuICAgIH0gPSB0aGlzO1xuICAgIGNvbnN0IG5ld0RlZ3JlZSA9IE1hdGgubWF4KFxuICAgICAgbWluLFxuICAgICAgTWF0aC5taW4oZGVncmVlLCBtYXgpLFxuICAgICk7XG5cbiAgICBpZiAobmV3RGVncmVlID09PSBsYXN0RGVncmVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5rbm9iRWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1kZWdyZWUnLCBgJHtuZXdEZWdyZWV9ZGVnYCk7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoQXR0cmlidXRlLmRlZ3JlZSwgYCR7bmV3RGVncmVlfWApO1xuICAgIHRyaWdnZXJFdmVudDxTcGluRXZlbnREZXRhaWw+KHRoaXMsIEV2ZW50LmNoYW5nZSwge1xuICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIGNhbmNlbGFibGU6IGZhbHNlLFxuICAgICAgY29tcG9zZWQ6IHRydWUsXG4gICAgICBkZXRhaWw6IHtcbiAgICAgICAgZGVncmVlOiBuZXdEZWdyZWUsXG4gICAgICAgIGxhc3REZWdyZWUsXG4gICAgICAgIG9mZnNldERlZ3JlZTogbmV3RGVncmVlIC0gbGFzdERlZ3JlZSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWxpYXMgb2YgZ2V0dGluZyBkZWdyZWUuXG4gICAqL1xuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVncmVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFsaWFzIG9mIHNldHRpbmcgZGVncmVlLlxuICAgKi9cbiAgc2V0IHZhbHVlKHZhbHVlKSB7XG4gICAgdGhpcy5kZWdyZWUgPSB2YWx1ZTtcbiAgfVxufVxuXG5yZWdpc3RlckVsZW1lbnQoS25vYiwgbm9kZU5hbWUpO1xuXG5leHBvcnQgZGVmYXVsdCBLbm9iO1xuIiwiaW1wb3J0IEtub2IgZnJvbSAnLi4va25vYic7XG5cbmNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcblxudGVtcGxhdGUuaW5uZXJIVE1MID0gYFxuICA8c3R5bGU+XG4gICAgOmhvc3Qge1xuICAgICAgLS1zaXplOiA4MHB4O1xuICAgICAgXG4gICAgICB3aWR0aDogdmFyKC0tc2l6ZSk7XG4gICAgICBoZWlnaHQ6IHZhcigtLXNpemUpO1xuICAgIH1cblxuICAgIGtub2Ige1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGN1cnJlbnRDb2xvcjtcbiAgICAgIGJhY2tncm91bmQ6ICNmM2YzZjM7XG4gICAgICBjb2xvcjogI2FhYTtcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgfVxuXG4gICAga25vYjpob3ZlcixcbiAgICBrbm9iOmFjdGl2ZSB7XG4gICAgICBjb2xvcjogIzg4ODtcbiAgICAgIGJhY2tncm91bmQ6ICNlZWU7XG4gICAgfVxuXG4gICAgY292ZXIge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiAwO1xuICAgICAgcmlnaHQ6IDA7XG4gICAgICBib3R0b206IDA7XG4gICAgICBsZWZ0OiAwO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIHotaW5kZXg6IDE7XG4gICAgfVxuXG4gICAgc2xvdFtuYW1lPXBvaW50ZXJdIHtcbiAgICAgIG1hcmdpbjogMCBhdXRvO1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgfVxuXG4gICAgOjpzbG90dGVkKFtzbG90PXBvaW50ZXJdKSB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cblxuICAgIGtub2IgPiBzbG90IHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHRvcDogNTAlO1xuICAgICAgbGVmdDogNTAlO1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG4gIDwvc3R5bGU+XG5gO1xuXG5jbGFzcyBLbm9iQmFzZSBleHRlbmRzIEtub2Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgKHRoaXMuc2hhZG93Um9vdCBhcyBTaGFkb3dSb290KVxuICAgICAgLmFwcGVuZCh0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgS25vYkJhc2U7XG4iLCJpbXBvcnQgS25vYkJhc2UgZnJvbSAnLi9iYXNpYyc7XG5pbXBvcnQgcmVnaXN0ZXJFbGVtZW50IGZyb20gJy4uL3V0aWxzL3JlZ2lzdGVyRWxlbWVudCc7XG5cbmNvbnN0IG5vZGVOYW1lID0gJ2tub2ItZG90JztcbmNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcblxudGVtcGxhdGUuaW5uZXJIVE1MID0gYFxuICA8c3R5bGU+XG4gICAgc2xvdFtuYW1lPXBvaW50ZXJdIHtcbiAgICAgIG1hcmdpbi10b3A6IDUlO1xuICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgd2lkdGg6IDEwJTtcbiAgICAgIGhlaWdodDogMTAlO1xuICAgICAgYmFja2dyb3VuZDogY3VycmVudENvbG9yO1xuICAgIH1cbiAgPC9zdHlsZT5cbmA7XG5cbmNsYXNzIEtub2JEb3QgZXh0ZW5kcyBLbm9iQmFzZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICAodGhpcy5zaGFkb3dSb290IGFzIFNoYWRvd1Jvb3QpXG4gICAgICAuYXBwZW5kKHRlbXBsYXRlLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpKTtcbiAgfVxufVxuXG5yZWdpc3RlckVsZW1lbnQoS25vYkRvdCwgbm9kZU5hbWUpO1xuXG5leHBvcnQgZGVmYXVsdCBLbm9iRG90O1xuIiwiaW1wb3J0IEtub2JCYXNlIGZyb20gJy4vYmFzaWMnO1xuaW1wb3J0IHJlZ2lzdGVyRWxlbWVudCBmcm9tICcuLi91dGlscy9yZWdpc3RlckVsZW1lbnQnO1xuXG5jb25zdCBub2RlTmFtZSA9ICdrbm9iLXRyaWFuZ2xlJztcbmNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcblxudGVtcGxhdGUuaW5uZXJIVE1MID0gYFxuICA8c3R5bGU+XG4gICAgc2xvdFtuYW1lPXBvaW50ZXJdIHtcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcbiAgICAgIG1hcmdpbi10b3A6IDUlO1xuICAgICAgd2lkdGg6IDEwJTtcbiAgICAgIGhlaWdodDogMTAlO1xuICAgICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KFxuICAgICAgICAxMzVkZWcsXG4gICAgICAgIGN1cnJlbnRDb2xvciA1MCUsXG4gICAgICAgIHRyYW5zcGFyZW50IDUwJVxuICAgICAgKTtcbiAgICB9XG4gIDwvc3R5bGU+XG5gO1xuXG5jbGFzcyBLbm9iVHJpYW5nbGUgZXh0ZW5kcyBLbm9iQmFzZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICAodGhpcy5zaGFkb3dSb290IGFzIFNoYWRvd1Jvb3QpXG4gICAgICAuYXBwZW5kKHRlbXBsYXRlLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpKTtcbiAgfVxufVxuXG5yZWdpc3RlckVsZW1lbnQoS25vYlRyaWFuZ2xlLCBub2RlTmFtZSk7XG5cbmV4cG9ydCBkZWZhdWx0IEtub2JUcmlhbmdsZTtcbiIsImltcG9ydCBLbm9iQmFzZSBmcm9tICcuL2Jhc2ljJztcbmltcG9ydCByZWdpc3RlckVsZW1lbnQgZnJvbSAnLi4vdXRpbHMvcmVnaXN0ZXJFbGVtZW50JztcblxuY29uc3Qgbm9kZU5hbWUgPSAna25vYi1saW5lJztcbmNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcblxudGVtcGxhdGUuaW5uZXJIVE1MID0gYFxuICA8c3R5bGU+XG4gICAgc2xvdFtuYW1lPXBvaW50ZXJdIHtcbiAgICAgIHdpZHRoOiAzJTtcbiAgICAgIGhlaWdodDogMTUlO1xuICAgICAgYmFja2dyb3VuZDogY3VycmVudENvbG9yO1xuICAgIH1cbiAgPC9zdHlsZT5cbmA7XG5cbmNsYXNzIEtub2JMaW5lIGV4dGVuZHMgS25vYkJhc2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgKHRoaXMuc2hhZG93Um9vdCBhcyBTaGFkb3dSb290KVxuICAgICAgLmFwcGVuZCh0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKSk7XG4gIH1cbn1cblxucmVnaXN0ZXJFbGVtZW50KEtub2JMaW5lLCBub2RlTmFtZSk7XG5cbmV4cG9ydCBkZWZhdWx0IEtub2JMaW5lO1xuIl0sIm5hbWVzIjpbImFkZEV2ZW50TGlzdGVuZXJzIiwicmVmIiwidHlwZXMiLCJsaXN0ZW5lciIsIm9wdGlvbnMiLCJmb3JFYWNoIiwidHlwZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0cmlnZ2VyRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJOb2RlIiwibm9kZU5hbWUiLCJjdXN0b21FbGVtZW50cyIsImdldCIsIlByb21pc2UiLCJyZWplY3QiLCJFcnJvciIsImRlZmluZSIsIndoZW5EZWZpbmVkIiwiY3JlYXRlUG9pbnQiLCJ4IiwieSIsIkRPTVBvaW50IiwiZnJvbVBvaW50IiwiRXZlbnQiLCJldmVudCIsImNsaWVudFgiLCJjbGllbnRZIiwiUEkiLCJoeXBvdCIsImFzaW4iLCJNYXRoIiwib3JpZ2luRE9NUG9pbnQiLCJnZXRRdWFkcmFudCIsInBvaW50IiwiY2VudGVyIiwiZ2V0UmFkaXVzT2ZRdWFkcmFudCIsInF1YWRyYW50IiwiZGlmZlgiLCJkaWZmWSIsImxlbmd0aCIsIkVWRU5UX1RPVUNIX1NUQVJUIiwiRVZFTlRfVE9VQ0hfTU9WRSIsIkVWRU5UX1RPVUNIX0VORCIsInNwaW5TdGFydExpc3RlbmVyIiwiZGVncmVlIiwic3RhcnREZWdyZWUiLCJ0aGlzIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjb21wb3NlZCIsImRldGFpbCIsImxhc3REZWdyZWUiLCJvZmZzZXREZWdyZWUiLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzdGFydFByZXNzUG9pbnQiLCJnZXRFdmVudFhZIiwic3RhcnRQcmVzc1F1YWRyYW50Iiwic3RhcnRQcmVzc1JhZGl1cyIsInRvdGFsRGlmZkRlZ3JlZSIsImxhc3RRdWFkcmFudCIsImxhc3RSYWRpdXMiLCJzcGlubmluZ0xpc3RlbmVyIiwiZXZ0IiwicHJlc3NQb2ludCIsInByZXNzUXVhZHJhbnQiLCJwcmVzc1JhZGl1cyIsImRpZmZSYWRpdXMiLCJuZXh0UXVhZHJhbnQiLCJuZXh0UmFkaXVzIiwicmFkaXVzIiwiZ2V0RGlmZlJhZGl1cyIsImRpZmZEZWdyZWUiLCJuZXh0RGVncmVlIiwicGFzc2VkTW92ZUV2ZW50Iiwic3BpbkVuZExpc3RlbmVyIiwiZG9jdW1lbnQiLCJwcmV2ZW50RGVmYXVsdCIsIkF0dHJpYnV0ZSIsImlzTmFOIiwiZ2xvYmFsVGhpcyIsInRlbXBsYXRlIiwiY3JlYXRlRWxlbWVudCIsImRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMiLCJJbmZpbml0eSIsImlubmVySFRNTCIsIktub2IiLCJIVE1MRWxlbWVudCIsImNvbnN0cnVjdG9yIiwic3VwZXIiLCJzaGFkb3dSb290IiwiYXR0YWNoU2hhZG93IiwibW9kZSIsImFwcGVuZCIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJrbm9iRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJhdHRyTmFtZSIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsImRpc2FibGVkIiwiaGFzQXR0cmlidXRlIiwibWluIiwiTnVtYmVyIiwiZ2V0QXR0cmlidXRlIiwibWF4Iiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiVHlwZUVycm9yIiwiUmFuZ2VFcnJvciIsIm5ld0RlZ3JlZSIsInN0eWxlIiwic2V0UHJvcGVydHkiLCJ2YWx1ZSIsInJlZ2lzdGVyRWxlbWVudCIsIktub2JCYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==