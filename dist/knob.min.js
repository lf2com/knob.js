(()=>{"use strict";function e(e,t,n,r){t.forEach((t=>{!function(e,t,n,r){e.addEventListener(t,n,r)}(e,t,n,r)}))}function t(e,t,n,r){t.forEach((t=>{e.removeEventListener(t,n,r)}))}function n(e,t,n){return e.dispatchEvent(new CustomEvent(t,n))}const r=function(e,t){return customElements.get(t)?Promise.reject(new Error(`Already defined <${t}>`)):(customElements.define(t,e),customElements.whenDefined(t))},s=function(e,t){return e instanceof DOMPoint?DOMPoint.fromPoint(e):new DOMPoint(e,t)},o=s;var i;!function(e){e.spinStart="spinstart",e.spinning="spinning",e.spinEnd="spinend",e.change="change"}(i||(i={}));const a=i,c=function(e){if(e instanceof TouchEvent){const{touches:t}=e,n=t.item(0),{clientX:r=0,clientY:o=0}=n??{};return s(r,o)}const{clientX:t,clientY:n}=e;return s(t,n)},{PI:d,hypot:l,asin:u}=Math,h=o(0,0);function m(e,t=h){return e.y<t.y?e.x>t.x?1:2:e.x<t.x?3:e.y>t.y?4:1}function g(e,t=h,n=m(e,t)){const r=e.x-t.x,s=e.y-t.y,o=l(r,s);switch(n){default:case 1:return u(-s/o);case 2:return u(-r/o);case 3:return u(s/o);case 4:return u(r/o)}}const b=["mousedown","touchstart"],p=["mousemove","touchmove"],f=["mouseup","touchend"];function x(r){const{degree:s}=this;if(!n(this,a.spinStart,{bubbles:!0,cancelable:!0,composed:!0,detail:{degree:s,lastDegree:s,offsetDegree:0}}))return;const{top:i,right:l,bottom:u,left:h}=this.getBoundingClientRect(),b=o((l+h)/2,(i+u)/2),x=c(r),v=m(x,b),y=g(x,b,v);let k=0,w=v,E=y;const A=e=>{const t=c(e),r=m(t,b),o=g(t,b,r),i=function(e,t,n,r){switch(n-e){default:case 0:return t-r;case-3:case 1:return t-r-d/2;case-1:case 3:return t-r+d/2;case-2:case 2:{const e=t+d-r;return e>d?2*d-e:e}}}(w,E,r,o)/d*180,{degree:l}=this;k+=i;const u=s+k,h=n(this,a.spinning,{bubbles:!0,cancelable:!0,composed:!0,detail:{degree:u,lastDegree:l,offsetDegree:k}});w=r,E=o,h&&(this.degree=u)},M=()=>{const{degree:e}=this;t(document,p,A),t(document,f,M),n(this,a.spinEnd,{bubbles:!0,cancelable:!1,composed:!0,detail:{degree:e,lastDegree:s,offsetDegree:k}})};r.preventDefault(),e(document,p,A),e(document,f,M)}var v;!function(e){e.disabled="disabled",e.degree="degree",e.min="min",e.max="max"}(v||(v={}));const y=v;var k;!function(e){e.degree="--degree"}(k||(k={}));const w=k,{isNaN:E}=globalThis,A=document.createElement("template"),M={[y.degree]:0,[y.min]:-1/0,[y.max]:1/0};A.innerHTML=`\n  <style>\n    :host {\n      position: relative;\n      touch-action: none;\n      display: inline-block;\n      vertical-align: text-bottom;\n    }\n\n    knob {\n      transition: inherit;\n      transform: rotate(var(${w.degree}));\n      width: 100%;\n      height: 100%;\n      display: block;\n    }\n  </style>\n  <knob>\n    <slot></slot>\n    <cover>\n      <slot name="pointer"></slot>\n    </cover>\n  </knob>\n`;class D extends HTMLElement{constructor(){super();const e=this.attachShadow({mode:"open"});e.append(A.content.cloneNode(!0)),this.knobElement=e.querySelector("knob"),D.observedAttributes.forEach((e=>{this.attributeChangedCallback(e)}))}static get observedAttributes(){return[y.disabled,y.min,y.max,y.degree]}attributeChangedCallback(e){switch(e){default:break;case y.disabled:this.disabled=this.hasAttribute(y.disabled);break;case y.min:{const e=Number(this.getAttribute(y.min)??M[y.min]);this.min=e,this.degree=Math.max(e,this.degree);break}case y.max:{const e=Number(this.getAttribute(y.max)??M[y.max]);this.max=e,this.degree=Math.min(e,this.degree);break}case y.degree:this.degree=Number(this.getAttribute(y.degree)??M[y.degree])}}get disabled(){return this.hasAttribute(y.disabled)}set disabled(n){n?(t(this,b,x),this.setAttribute(y.disabled,"")):(e(this,b,x),this.removeAttribute(y.disabled))}get min(){const e=this.getAttribute(y.min);return null===e?M[y.min]:Number(e)}set min(e){if(E(e))throw new TypeError(`Invalid min degree: ${e}`);if(e!==this.min&&(this.setAttribute(y.min,`${e}`),this.max<e))throw new RangeError("Setting min degree that is greater than max degree might cause spinning error")}get max(){const e=this.getAttribute(y.max);return null===e?M[y.max]:Number(e)}set max(e){if(E(e))throw new TypeError(`Invalid max degree: ${e}`);if(e!==this.max&&(this.setAttribute(y.max,`${e}`),this.min>e))throw new RangeError("Setting max degree that is less than min degree might cause spinning error")}get degree(){const e=this.getAttribute(y.degree);return null===e?M[y.degree]:Number(e)}set degree(e){if(E(e))throw new TypeError(`Invalid degree: ${e}`);const{degree:t,min:r,max:s}=this,o=Math.max(r,Math.min(e,s));o!==t&&(this.knobElement.style.setProperty(w.degree,`${o}deg`),this.setAttribute(y.degree,`${o}`),n(this,a.change,{bubbles:!0,cancelable:!1,composed:!0,detail:{degree:o,lastDegree:t,offsetDegree:o-t}}))}get value(){return this.degree}set value(e){this.degree=e}}r(D,"knob-base");const N=D,T=document.createElement("template");T.innerHTML="\n  <style>\n    :host {\n      --size: 80px;\n      \n      width: var(--size);\n      height: var(--size);\n    }\n\n    knob {\n      position: relative;\n      border-radius: 50%;\n      box-sizing: border-box;\n      border: 1px solid currentColor;\n      background: #f3f3f3;\n      color: #aaa;\n      overflow: hidden;\n    }\n\n    knob:hover,\n    knob:active {\n      color: #888;\n      background: #eee;\n    }\n\n    cover {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      display: flex;\n      z-index: 1;\n    }\n\n    slot[name=pointer] {\n      margin: 0 auto;\n      display: block;\n    }\n\n    ::slotted([slot=pointer]) {\n      display: none;\n    }\n\n    knob > slot {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      display: block;\n    }\n  </style>\n";const C=class extends N{constructor(){super(),this.shadowRoot.append(T.content.cloneNode(!0))}},$=document.createElement("template");$.innerHTML="\n  <style>\n    slot[name=pointer] {\n      margin-top: 5%;\n      border-radius: 50%;\n      width: 10%;\n      height: 10%;\n      background: currentColor;\n    }\n  </style>\n";r(class extends C{constructor(){super(),this.shadowRoot.append($.content.cloneNode(!0))}},"knob-dot");const L=document.createElement("template");L.innerHTML="\n  <style>\n    slot[name=pointer] {\n      transform: rotate(45deg);\n      margin-top: 5%;\n      width: 10%;\n      height: 10%;\n      background-image: linear-gradient(\n        135deg,\n        currentColor 50%,\n        transparent 50%\n      );\n    }\n  </style>\n";r(class extends C{constructor(){super(),this.shadowRoot.append(L.content.cloneNode(!0))}},"knob-triangle");const P=document.createElement("template");P.innerHTML="\n  <style>\n    slot[name=pointer] {\n      width: 3%;\n      height: 15%;\n      background: currentColor;\n    }\n  </style>\n";r(class extends C{constructor(){super(),this.shadowRoot.append(P.content.cloneNode(!0))}},"knob-line")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,