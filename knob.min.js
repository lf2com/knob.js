(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var _knob = require('./libs/knob');

var _knob2 = _interopRequireDefault(_knob);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = _knob2.default;
if (self && self instanceof Object && self === self.self) {
  self.Knob = _knob2.default;
}

},{"./libs/knob":3}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _stdlib = require('./stdlib');

var stdEventName = function stdEventName(name) {
  if (!(0, _stdlib.isstr)(name)) {
    throw new Error('Invalid name: ' + (0, _stdlib.tostr)(name));
  }

  var _name$split = name.split('.'),
      _name$split2 = _slicedToArray(_name$split, 2),
      major = _name$split2[0],
      minor = _name$split2[1];

  if (!(0, _stdlib.isset)(major)) {
    throw new Error('Illegal name: ' + (0, _stdlib.tostr)(name));
  }
  return [major, minor];
};
var stdEventNames = function stdEventNames(names) {
  if ((0, _stdlib.isstr)(names)) {
    names = names.split(' ');
  } else if (!(0, _stdlib.isarray)(names)) {
    throw new Error('Invalid names: ' + (0, _stdlib.tostr)(names));
  }
  return names.map(function (name) {
    return stdEventName(name);
  });
};
var stdEventFuncs = function stdEventFuncs(funcs) {
  if ((0, _stdlib.isfunc)(funcs)) {
    return [funcs];
  }
  if (!(0, _stdlib.isarray)(funcs)) {
    throw new Error('Invalid funcs: ' + (0, _stdlib.tostr)(funcs));
  }
  return funcs.map(function (func) {
    if (!(0, _stdlib.isfunc)(func)) {
      throw new Error('Invaqlid func: ' + (0, _stdlib.tostr)(func));
    }
    return func;
  });
};

function EventHandler(ref) {
  if (!this instanceof EventHandler) {
    return new (Function.prototype.bind.apply(EventHandler, [null].concat(Array.prototype.slice.call(arguments))))();
  }
  Object.defineProperties(this, {
    ref: { value: ref },
    dom: { value: (0, _stdlib.iselem)(ref) ? ref : document.createElement('eh') },
    events: { value: {} }
  });
}

['on', 'off', 'trigger'].forEach(function (prop) {
  EventHandler[prop] = function (ref) {
    var _ref;

    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (ref instanceof EventHandler) {
      ref[prop].apply(ref, args);
    } else if (!(0, _stdlib.iselem)(ref)) {
      throw new Error('Invalid element: ' + (0, _stdlib.tostr)(ref));
    }
    ref._eventHandler = (_ref = ref._eventHandler || new EventHandler(ref))[prop].apply(_ref, args);
    return EventHandler;
  };
});

EventHandler.prototype.on = function (names, funcs) {
  var _this = this;

  funcs = stdEventFuncs(funcs);
  if ((0, _stdlib.isset)(this.ref)) {
    funcs = funcs.map(function (func) {
      return func.bind(_this.ref);
    });
  }
  stdEventNames(names).forEach(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        major = _ref3[0],
        minor = _ref3[1];

    funcs.forEach(function (func) {
      return _this.dom.addEventListener(major, func);
    });
    _this.events[major] = (_this.events[major] || []).concat(funcs.map(function (func) {
      return {
        minor: minor,
        func: func
      };
    }));
  });
  return this;
};

EventHandler.prototype.off = function (names) {
  var _this2 = this;

  stdEventNames(names).forEach(function (_ref4) {
    var _ref5 = _slicedToArray(_ref4, 2),
        major = _ref5[0],
        minor = _ref5[1];

    var eventList = _this2.events[major] || [];
    var removeList = [];
    if ((0, _stdlib.isset)(minor)) {
      for (var i = eventList.length - 1; 0 <= i; i--) {
        var ref = eventList[i];
        if (minor === ref.minor) {
          removeList.push(ref);
          eventList.splice(i, 1);
        }
      }
    } else {
      eventList.splice(0, eventList.length).forEach(function (ref) {
        removeList.push(ref);
      });
    }
    removeList.forEach(function (_ref6) {
      var func = _ref6.func;

      _this2.dom.removeEventListener(major, func);
    });
    if (0 === eventList.length) {
      delete _this2.events[major];
    }
  });
  return this;
};

EventHandler.prototype.trigger = function (names, detail, onPrevent) {
  var _this3 = this;

  if ((0, _stdlib.isset)(onPrevent) && !(0, _stdlib.isfunc)(onPrevent)) {
    throw new Error('Invalid onPrevent function: ' + (0, _stdlib.tostr)(onPrevent));
  }
  stdEventNames(names).forEach(function (_ref7) {
    var _ref8 = _slicedToArray(_ref7, 2),
        major = _ref8[0],
        _minor = _ref8[1];

    var _preventDefault = false;
    if ((0, _stdlib.isset)(_minor)) {
      var _stopImmediatePropagation = false;
      var preventDefault = function preventDefault() {
        return _preventDefault = true;
      };
      var stopImmediatePropagation = function stopImmediatePropagation() {
        return _stopImmediatePropagation = true;
      };
      var filteredEvents = (_this3.events[major] || []).filter(function (_ref9) {
        var minor = _ref9.minor;
        return minor === _minor;
      });
      for (var i = 0; !_stopImmediatePropagation && i < filteredEvents.length; i++) {
        if (false === filteredEvents[i].func({ detail: detail, preventDefault: preventDefault, stopImmediatePropagation: stopImmediatePropagation })) {
          _preventDefault = true;
        }
      }
    } else {
      var evt = document.createEvent('CustomEvent');
      evt.initCustomEvent(major, true, true, detail);
      if (false === _this3.dom.dispatchEvent(evt)) {
        _preventDefault = true;
      }
    }
    _preventDefault && onPrevent && onPrevent(major);
  });
  return this;
};

exports.default = EventHandler;

},{"./stdlib":4}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _stdlib = require('./stdlib');

var _eventHandler = require('./event-handler');

var _eventHandler2 = _interopRequireDefault(_eventHandler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var EVENT = {
  mouseDown: ['mousedown', 'touchstart'],
  mouseMove: ['mousemove', 'touchmove'],
  mouseUp: ['mouseup', 'touchend'],
  knobStart: ['spinstart', 'start'],
  knobEnd: ['spinend', 'end'],
  knobSpin: ['spining', 'change']
};

var getEventXY = function getEventXY(_ref) {
  var clientX = _ref.clientX,
      clientY = _ref.clientY,
      _ref$touches = _ref.touches;
  _ref$touches = _ref$touches === undefined ? [] : _ref$touches;

  var _ref$touches2 = _slicedToArray(_ref$touches, 1),
      _ref$touches2$ = _ref$touches2[0];

  _ref$touches2$ = _ref$touches2$ === undefined ? {} : _ref$touches2$;
  var _ref$touches2$$client = _ref$touches2$.clientX,
      x = _ref$touches2$$client === undefined ? clientX : _ref$touches2$$client,
      _ref$touches2$$client2 = _ref$touches2$.clientY,
      y = _ref$touches2$$client2 === undefined ? clientY : _ref$touches2$$client2;
  return { x: x, y: y };
};
var bindEventNames = function bindEventNames(self) {
  for (var _len = arguments.length, names = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    names[_key - 1] = arguments[_key];
  }

  var id = self[KNOB_PROPS.id];

  return names.reduce(function (arr, name) {
    return (0, _stdlib.isarray)(name) ? arr.concat(bindEventNames.apply(undefined, [self].concat(_toConsumableArray(name)))) : arr.concat(name.split(' ').map(function (name) {
      return name + '.' + id;
    }));
  }, []);
};
var stdDeg = function stdDeg(d) {
  return d < 0 ? stdDeg(d + 360) : 360 <= d ? stdDeg(d - 360) : d;
};
var posToDeg = function posToDeg(p) {
  var c = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { x: 0, y: 0 };

  var diffX = p.x - c.x;
  var diffY = p.y - c.y;
  var len = Math.hypot(diffX, diffY);
  var rad = diffX / len;
  if (p.y < c.y) {
    if (p.x < c.x) rad = Math.PI + Math.acos(diffY / len); // 4
    else rad = Math.asin(diffX / len); // 1
  } else if (p.x < c.x) rad = Math.PI + Math.asin(-diffX / len); // 3
  else rad = Math.acos(-diffY / len); // 2
  return stdDeg(180 * rad / Math.PI);
};

var KNOB_PROPS = {
  id: '_id',
  dom: '_dom',
  eventHandler: '_eventHandler',
  minDeg: '_minDeg',
  maxDeg: '_maxDeg',
  fixed: '_fixed',
  deg: '_deg'
};

var KNOB_DEFAULTS = {
  minDeg: -Infinity,
  maxDeg: Infinity,
  fixed: false,
  deg: 0
};

function Knob(dom) {
  var _Object$definePropert,
      _this = this;

  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!this instanceof Knob) {
    return new (Function.prototype.bind.apply(Knob, [null].concat(Array.prototype.slice.call(arguments))))();
  }
  if (!(0, _stdlib.iselem)(dom)) {
    throw new Error('Invalid element: ' + (0, _stdlib.tostr)(dom));
  }
  Object.defineProperties(this, (_Object$definePropert = {}, _defineProperty(_Object$definePropert, KNOB_PROPS.id, { value: 'knob_' + Date.now() + Math.random() }), _defineProperty(_Object$definePropert, KNOB_PROPS.dom, { value: dom }), _defineProperty(_Object$definePropert, KNOB_PROPS.eventHandler, { value: new _eventHandler2.default() }), _defineProperty(_Object$definePropert, KNOB_PROPS.minDeg, { value: KNOB_DEFAULTS.minDeg, writable: true }), _defineProperty(_Object$definePropert, KNOB_PROPS.maxDeg, { value: KNOB_DEFAULTS.maxDeg, writable: true }), _defineProperty(_Object$definePropert, KNOB_PROPS.fixed, { value: KNOB_DEFAULTS.fixed, writable: true }), _defineProperty(_Object$definePropert, KNOB_PROPS.deg, { value: KNOB_DEFAULTS.deg, writable: true }), _Object$definePropert));
  (0, _stdlib.objForEach)(params, function (value, prop) {
    return (0, _stdlib.isset)(_this[prop]) && _this[prop](value);
  });
  this.enable();
}

['on', 'off'].forEach(function (prop) {
  Knob.prototype[prop] = function () {
    var _KNOB_PROPS$eventHand;

    (_KNOB_PROPS$eventHand = this[KNOB_PROPS.eventHandler])[prop].apply(_KNOB_PROPS$eventHand, arguments);
    return this;
  };
});

Knob.prototype.reset = function () {
  this[KNOB_PROPS.deg] = KNOB_DEFAULTS.deg;
  this[KNOB_PROPS.dom].style.transform = '';
};
Knob.prototype.destroy = function () {
  _eventHandler2.default.off(this[KNOB_PROPS.dom], EVENT.mouseDown);
};

Knob.prototype.disable = function () {
  _eventHandler2.default.off(this[KNOB_PROPS.dom], bindEventNames(this, EVENT.mouseDown));
  return this;
};
Knob.prototype.enable = function () {
  var _this2 = this;

  _eventHandler2.default.on(this[KNOB_PROPS.dom], bindEventNames(this, EVENT.mouseDown), function (evt) {
    evt.preventDefault();

    var _evt$target$getBoundi = evt.target.getBoundingClientRect(),
        top = _evt$target$getBoundi.top,
        right = _evt$target$getBoundi.right,
        bottom = _evt$target$getBoundi.bottom,
        left = _evt$target$getBoundi.left;

    var eventHandler = _this2[KNOB_PROPS.eventHandler];
    var center = { x: .5 * (right + left), y: .5 * (top + bottom) };
    var originDeg = _this2[KNOB_PROPS.deg];
    var lastFingerPos = getEventXY(evt);
    var lastFingerDeg = posToDeg(lastFingerPos, center);
    _eventHandler2.default.on(document, bindEventNames(_this2, EVENT.mouseMove), function (evt) {
      var _evt$target$getBoundi2 = evt.target.getBoundingClientRect(),
          top = _evt$target$getBoundi2.top,
          right = _evt$target$getBoundi2.right,
          bottom = _evt$target$getBoundi2.bottom,
          left = _evt$target$getBoundi2.left;

      var center = { x: .5 * (right + left), y: .5 * (top + bottom) };
      var fingerPos = getEventXY(evt);
      var fingerDeg = posToDeg(fingerPos, center);
      var diffDeg = function (diff) {
        return 180 < Math.abs(diff) ? diff + (fingerDeg < lastFingerDeg ? 360 : -360) : diff;
      }(fingerDeg - lastFingerDeg);
      var currDeg = setDeg(_this2, _this2[KNOB_PROPS.deg] + diffDeg);
      _this2[KNOB_PROPS.deg] = currDeg;
      lastFingerPos = fingerPos;
      lastFingerDeg = fingerDeg;
      eventHandler.trigger(EVENT.knobSpin, {
        fingerDeg: fingerDeg,
        offsetDeg: currDeg - originDeg,
        deg: currDeg
      });
    });
    _eventHandler2.default.on(document, bindEventNames(_this2, EVENT.mouseUp), function () {
      var deg = _this2[KNOB_PROPS.deg];
      _eventHandler2.default.off(document, bindEventNames(_this2, EVENT.mouseMove, EVENT.mouseUp));
      eventHandler.trigger(EVENT.knobEnd, {
        offsetDeg: deg - originDeg,
        deg: deg
      });
    });
    eventHandler.trigger(EVENT.knobStart, {
      fingerDeg: posToDeg(lastFingerPos, center),
      offsetDeg: 0,
      deg: originDeg
    });
  });
  return this;
};

var setDeg = function setDeg(self) {
  var deg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : self[KNOB_PROPS.deg];

  if (!(0, _stdlib.isnum)(deg)) {
    throw new Error('Invalid degree: ' + (0, _stdlib.tostr)(deg));
  }
  var minDeg = self[KNOB_PROPS.minDeg];
  var maxDeg = self[KNOB_PROPS.maxDeg];
  var fixed = self[KNOB_PROPS.fixed];
  deg = Math.min(maxDeg, Math.max(minDeg, deg));
  if (!fixed) {
    var dom = self[KNOB_PROPS.dom];
    dom.style.transformOrigin = 'center center';
    dom.style.transform = 'rotate(' + stdDeg(deg) + 'deg)';
  }
  return deg;
};
Knob.prototype.setDeg = function (deg) {
  var lastDeg = this[KNOB_PROPS.deg];
  deg = setDeg(this, deg);
  this[KNOB_PROPS.eventHandler].trigger(EVENT.knobSpin, {
    offsetDeg: deg - lastDeg,
    deg: deg
  });
  return this;
};
Knob.prototype.getDeg = function () {
  return this[KNOB_PROPS.deg];
};
Knob.prototype.deg = function (deg) {
  return (0, _stdlib.isset)(deg) ? this.setDeg(deg) : this.getDeg();
};

Knob.prototype.setMinDeg = function (deg) {
  if (!(0, _stdlib.isset)(deg)) {
    deg = -Infinity;
  } else if (!(0, _stdlib.isnum)(deg)) {
    throw new Error('Invalid degree: ' + (0, _stdlib.tostr)(deg));
  } else if (this[KNOB_PROPS.maxDeg] < deg) {
    throw new Error('Illegal degree: ' + this[KNOB_PROPS.maxDeg] + ' < ' + deg);
  }
  this[KNOB_PROPS.minDeg] = deg;
  this.setDeg();
  return this;
};
Knob.prototype.getMinDeg = function () {
  return this[KNOB_PROPS.minDeg];
};
Knob.prototype.minDeg = function (deg) {
  return (0, _stdlib.isset)(deg) ? this.setMinDeg(deg) : this.getMinDeg();
};

Knob.prototype.setMaxDeg = function (deg) {
  if (!(0, _stdlib.isset)(deg)) {
    deg = Infinity;
  } else if (!(0, _stdlib.isnum)(deg)) {
    throw new Error('Invalid degree: ' + (0, _stdlib.tostr)(deg));
  } else if (deg < this[KNOB_PROPS.minDeg]) {
    throw new Error('Illegal degree: ' + deg + ' < ' + this[KNOB_PROPS.minDeg]);
  }
  this[KNOB_PROPS.maxDeg] = deg;
  this.setDeg();
  return this;
};
Knob.prototype.getMaxDeg = function () {
  return this[KNOB_PROPS.maxDeg];
};
Knob.prototype.maxDeg = function (deg) {
  return (0, _stdlib.isset)(deg) ? this.setMaxDeg(deg) : this.getMaxDeg();
};

Knob.prototype.setFixed = function (fixed) {
  var dom = this[KNOB_PROPS.dom];
  dom.style.transform = '';
  dom.style.transformOrigin = '';
  this[KNOB_PROPS.fixed] = (0, _stdlib.tobool)(fixed);
  setDeg(this);
  return this;
};
Knob.prototype.getFixed = function () {
  return this[KNOB_PROPS.fixed];
};
Knob.prototype.fixed = function (fixed) {
  return (0, _stdlib.isset)(fixed) ? this.setFixed(fixed) : this.getFixed();
};

exports.default = Knob;

},{"./event-handler":2,"./stdlib":4}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var isset = exports.isset = function isset(o) {
  return 'undefined' !== typeof o;
};
var useor = exports.useor = function useor(a, b) {
  var c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : isset;
  return c(a) ? a : b;
};
var tobool = exports.tobool = function tobool(b) {
  return b ? true : false;
};
var isstr = exports.isstr = function isstr(s) {
  return 'string' === typeof s || isset(s) && s instanceof String;
};
var tostr = exports.tostr = function tostr(s) {
  return isset(s) ? s.toString() : '';
};
var isnum = exports.isnum = function isnum(n) {
  return !isNaN(n);
};
var isfunc = exports.isfunc = function isfunc(f) {
  return 'function' === typeof f;
};
var isarray = exports.isarray = function isarray(a) {
  return isset(a) && Array.isArray(a);
};
var objKeys = exports.objKeys = function objKeys(o) {
  return Object.keys(o);
};
var objForEach = exports.objForEach = function objForEach(o) {
  var f = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
  var t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
  return objKeys(o).forEach(function (p) {
    return f.call(t, o[p], p, o);
  });
};
var iselem = exports.iselem = function iselem(e) {
  return isset(e) && (e instanceof Element || e instanceof Window || e instanceof Document);
};

},{}]},{},[1]);
